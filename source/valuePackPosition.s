//Function which generates a random number from (0-8)
//Takes no arguments
//Returns:
//	1) r0: the randomly generated number
.global	randomNumber
randomNumber:
	push	{lr}

	mov	r0, #0			//		
	bl	time			//
	
	mov	r1, r0			//
	bl	srand			//

	bl	rand			//
	mov	r4, r0			//generate a random number and store it in r4

	mov	r5, #0x7		//Bitmask
	
	and	r0, r5, r4		//use bitmask to get last 3 bit of random number

	pop	{lr}
	mov	pc, lr

//Function which sets the position of the value packs to one of 9 possible locations
//Location is determined by a random number generated above
//Takes 1 argument:
//	1) r0: a number from 0-8
//Returns nothing
.global setValuePackPositions
setValuePackPositions:
	push	{r4-r11, lr}

	ldr	r4, =gameVersionState
	ldr	r4, [r4]
	cmp	r4, #0
	beq	position0b
	
	cmp	r4, #2
	beq	position0c

position0:
	cmp	r0, #0			//if r0 is 0
	bne	position1		//set the value packs in position 1
					//else, check if r0 is 1, then 2 and so on

	mov	r1, #144		//set x position of paddle value pack 1
	mov	r2, #384		//set y position of paddle value pack 1
	
	mov	r3, #784		//set x position of paddle value pack 2
	mov	r4, #288		//set y position of paddle value pack 2

	mov	r5, #464		//set x position of catch ball value pack 1
	mov	r6, #224		//set y position of catch ball value pack 2
	
	mov	r8, #1168		//set X position of catch ball value pack 2
	mov	r9, #384		//set y position of catch ball value pack 2

	mov	r10, #336		// set x position of brick value pack
	mov	r11, #128		// set y position of brick value pack

	b	SVPPReturn

position1:				
					//the above procedure is repeated above 7 times for different positions
					//position is selected based on argument in r0
					//argument passed into r0 is a randomly generated number from (0-8)
					//this number is randomly generated by the randomNumber function above
	cmp	r0, #1
	bne	position2

	mov	r1, #656
	mov	r2, #192
	
	mov	r3, #656
	mov	r4, #480

	mov	r5, #208
	mov	r6, #416
	
	mov	r8, #912
	mov	r9, #224

	mov	r10, #336		
	mov	r11, #128

	b	SVPPReturn
position2:
	cmp	r0, #2
	bne	position3

	mov	r1, #208
	mov	r2, #448
	
	mov	r3, #1040
	mov	r4, #224

	mov	r5, #656
	mov	r6, #480
	
	mov	r8, #464
	mov	r9, #288

	mov	r10, #976		
	mov	r11, #480

	b	SVPPReturn
position3:
	cmp	r0, #3
	bne	position4

	mov	r1, #1040
	mov	r2, #192
	
	mov	r3, #208
	mov	r4, #352

	mov	r5, #784
	mov	r6, #480
	
	mov	r8, #720
	mov	r9, #224

	mov	r10, #464		
	mov	r11, #352

	b	SVPPReturn
position4:
	cmp	r0, #4
	bne	position5

	mov	r1, #592
	mov	r2, #448
	
	mov	r3, #784
	mov	r4, #320

	mov	r5, #656
	mov	r6, #448
	
	mov	r8, #272
	mov	r9, #288

	mov	r10, #720		
	mov	r11, #448

	b	SVPPReturn
position5:
	cmp	r0, #5
	bne	position6

	mov	r1, #336
	mov	r2, #192
	
	mov	r3, #976
	mov	r4, #192

	mov	r5, #912
	mov	r6, #416
	
	mov	r8, #464
	mov	r9, #544

	mov	r10, #144		
	mov	r11, #352

	b	SVPPReturn
position6:
	cmp	r0, #6
	bne	position7

	mov	r1, #1040
	mov	r2, #448
	
	mov	r3, #656
	mov	r4, #480

	mov	r5, #464
	mov	r6, #288
	
	mov	r8, #272
	mov	r9, #512

	mov	r10, #592		
	mov	r11, #288


	b	SVPPReturn
position7:
	
	mov	r1, #720
	mov	r2, #480
	
	mov	r3, #912
	mov	r4, #384

	mov	r5, #912
	mov	r6, #352
	
	mov	r8, #400
	mov	r9, #224
	
	mov	r10, #848		
	mov	r11, #192
	b	SVPPReturn

position0b:
	cmp	r0, #0			//if r0 is 0
	bne	position1b		//set the value packs in position 1
					//else, check if r0 is 1, then 2 and so on

	mov	r1, #144		//set x position of paddle value pack 1
	mov	r2, #128		//set y position of paddle value pack 1
	
	mov	r3, #784		//set x position of paddle value pack 2
	mov	r4, #160		//set y position of paddle value pack 2

	mov	r5, #464		//set x position of catch ball value pack 1
	mov	r6, #192		//set y position of catch ball value pack 2
	
	mov	r8, #1168		//set X position of catch ball value pack 2
	mov	r9, #224		//set y position of catch ball value pack 2

	mov	r10, #336		// set x position of brick value pack
	mov	r11, #256		// set y position of brick value pack

	b	SVPPReturn

position1b:				
					//the above procedure is repeated above 7 times for different positions
					//position is selected based on argument in r0
					//argument passed into r0 is a randomly generated number from (0-8)
					//this number is randomly generated by the randomNumber function above
	cmp	r0, #1
	bne	position2b

	mov	r1, #656
	mov	r2, #288
	
	mov	r3, #656
	mov	r4, #128

	mov	r5, #208
	mov	r6, #160
	
	mov	r8, #912
	mov	r9, #192

	mov	r10, #336		
	mov	r11, #224

	b	SVPPReturn
position2b:
	cmp	r0, #2
	bne	position3b

	mov	r1, #208
	mov	r2, #256
	
	mov	r3, #1040
	mov	r4, #288

	mov	r5, #656
	mov	r6, #128
	
	mov	r8, #464
	mov	r9, #160

	mov	r10, #976		
	mov	r11, #192

	b	SVPPReturn
position3b:
	cmp	r0, #3
	bne	position4b

	mov	r1, #1040
	mov	r2, #224
	
	mov	r3, #208
	mov	r4, #256

	mov	r5, #784
	mov	r6, #288
	
	mov	r8, #720
	mov	r9, #128

	mov	r10, #464		
	mov	r11, #160

	b	SVPPReturn
position4b:
	cmp	r0, #4
	bne	position5b

	mov	r1, #592
	mov	r2, #192
	
	mov	r3, #784
	mov	r4, #224

	mov	r5, #656
	mov	r6, #256
	
	mov	r8, #272
	mov	r9, #288

	mov	r10, #720		
	mov	r11, #128

	b	SVPPReturn
position5b:
	cmp	r0, #5
	bne	position6b

	mov	r1, #336
	mov	r2, #160
	
	mov	r3, #976
	mov	r4, #192

	mov	r5, #912
	mov	r6, #224
	
	mov	r8, #464
	mov	r9, #256

	mov	r10, #144		
	mov	r11, #288

	b	SVPPReturn
position6b:
	cmp	r0, #6
	bne	position7b

	mov	r1, #1040
	mov	r2, #128
	
	mov	r3, #656
	mov	r4, #160

	mov	r5, #464
	mov	r6, #192
	
	mov	r8, #272
	mov	r9, #224

	mov	r10, #592		
	mov	r11, #256


	b	SVPPReturn
position7b:
	
	mov	r1, #720
	mov	r2, #288
	
	mov	r3, #912
	mov	r4, #128

	mov	r5, #912
	mov	r6, #160
	
	mov	r8, #400
	mov	r9, #192
	
	mov	r10, #848		
	mov	r11, #224

	b	SVPPReturn

position0c:
	cmp	r0, #0			//if r0 is 0
	bne	position1c		//set the value packs in position 1
					//else, check if r0 is 1, then 2 and so on

	mov	r1, #528		//set x position of paddle value pack 1
	mov	r2, #96			//set y position of paddle value pack 1
	
	mov	r3, #784		//set x position of paddle value pack 2
	mov	r4, #96			//set y position of paddle value pack 2

	mov	r5, #1168		//set x position of catch ball value pack 1
	mov	r6, #320		//set y position of catch ball value pack 2
	
	mov	r8, #1168		//set X position of catch ball value pack 2
	mov	r9, #352		//set y position of catch ball value pack 2

	mov	r10, #656		// set x position of brick value pack
	mov	r11, #736		// set y position of brick value pack

	b	SVPPReturn

position1c:				
					//the above procedure is repeated above 7 times for different positions
					//position is selected based on argument in r0
					//argument passed into r0 is a randomly generated number from (0-8)
					//this number is randomly generated by the randomNumber function above
	cmp	r0, #1
	bne	position2c

	mov	r1, #464
	mov	r2, #96
	
	mov	r3, #144
	mov	r4, #384

	mov	r5, #208
	mov	r6, #288
	
	mov	r8, #976
	mov	r9, #160

	mov	r10, #1168		
	mov	r11, #352

	b	SVPPReturn
position2c:
	cmp	r0, #2
	bne	position3c

	mov	r1, #144
	mov	r2, #416
	
	mov	r3, #144
	mov	r4, #544

	mov	r5, #336
	mov	r6, #384
	
	mov	r8, #528
	mov	r9, #320

	mov	r10, #336		
	mov	r11, #192

	b	SVPPReturn
position3c:
	cmp	r0, #3
	bne	position4c

	mov	r1, #400
	mov	r2, #128
	
	mov	r3, #912
	mov	r4, #128

	mov	r5, #592
	mov	r6, #96
	
	mov	r8, #528
	mov	r9, #192

	mov	r10, #784		
	mov	r11, #192

	b	SVPPReturn
position4c:
	cmp	r0, #4
	bne	position5c

	mov	r1, #272
	mov	r2, #608
	
	mov	r3, #208
	mov	r4, #608

	mov	r5, #1168
	mov	r6, #544
	
	mov	r8, #1104
	mov	r9, #448

	mov	r10, #1104		
	mov	r11, #576

	b	SVPPReturn
position5c:
	cmp	r0, #5
	bne	position6c

	mov	r1, #272
	mov	r2, #256
	
	mov	r3, #208
	mov	r4, #320

	mov	r5, #784
	mov	r6, #416
	
	mov	r8, #656
	mov	r9, #96

	mov	r10, #848		
	mov	r11, #96

	b	SVPPReturn
position6c:
	cmp	r0, #6
	bne	position7c

	mov	r1, #1104
	mov	r2, #448
	
	mov	r3, #528
	mov	r4, #192

	mov	r5, #400
	mov	r6, #128
	
	mov	r8, #976
	mov	r9, #160

	mov	r10, #208		
	mov	r11, #320


	b	SVPPReturn
position7c:
	
	mov	r1, #848
	mov	r2, #96
	
	mov	r3, #1104
	mov	r4, #576

	mov	r5, #336
	mov	r6, #384
	
	mov	r8, #1104
	mov	r9, #448
	
	mov	r10, #144		
	mov	r11, #544

SVPPReturn:

	mov	r0, #0

	ldr	r7, =valuePaddleState2
	str	r1, [r7]		//paddle value pack 1 x position
	str	r2, [r7, #4]		//paddle value pack 1 y position
	str	r2, [r7, #8]		//paddle value pack 1 y initial position
	str	r0, [r7, #12]		//paddle value pack 1 enabled flag
	

	ldr	r7, =valuePaddleState		
	str	r3, [r7]		//paddle value pack 2 x position
	str	r4, [r7, #4]		//paddle value pack 2 y position
	str	r4, [r7, #8]		//paddle value pack 2 y initial position
	str	r0, [r7, #12]		//paddle value pack 2 enabled flag

	ldr	r7, =valueBallState2		
	str	r5, [r7]		//catch ball value pack 1 x position
	str	r6, [r7, #4]		//catch ball value pack 1 y position
	str	r6, [r7, #8]		//catch ball value pack 1 y initial position
	str	r0, [r7, #12]		//catch ball value pack 1 enabled flag
	

	ldr	r7, =valueBallState		
	str	r8, [r7]		//catch ball value pack 2 x position
	str	r9, [r7, #4]		//catch ball value pack 2 y position
	str	r9, [r7, #8]		//catch ball value pack 2 y initial position
	str	r0, [r7, #12]		//catch ball value pack 2 enabled flag

	ldr	r7, =valueBrickState	
	str	r10, [r7]		//catch ball value pack 2 x position
	str	r11, [r7, #4]		//catch ball value pack 2 y position
	str	r11, [r7, #8]		//catch ball value pack 2 y initial position
	str	r0, [r7, #12]		//catch ball value pack 2 enabled flag
	
	pop	{r4-r11, lr}
	mov	pc, lr
